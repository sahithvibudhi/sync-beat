{"version":3,"sources":["models/user/index.js","components/route-validation/index.js","components/join/index.js","components/play/index.js","components/welcome/index.js","serviceWorker.js","index.js"],"names":["User","user","localStorage","getItem","JSON","parse","name","e","setItem","stringify","PrivateRoute","Component","component","rest","render","props","authenticated","to","Join","className","Play","Welcome","useState","setName","id","role","aria-label","onChange","target","value","placeholder","onClick","save","history","push","Boolean","window","location","hostname","match","gateway","basename","process","path","exact","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MA0BeA,E,6GAvBP,IAAIC,EAAOC,aAAaC,QAAQ,QAChC,IAEI,IADAF,EAAOG,KAAKC,MAAMJ,IACTK,KACL,OAAO,EAEb,MAAOC,GACL,OAAO,EAEX,OAAO,I,0DAOCD,GAER,OADAJ,aAAaM,QAAQ,OAAQJ,KAAKK,UAAU,CAACH,WACtC,M,KCRAI,EARM,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAAyBC,EAA5B,oCACjB,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OAAQ,SAACC,GAAD,OACE,IAAzBf,EAAKgB,gBACD,kBAACL,EAAcI,GACf,kBAAC,IAAD,CAAUE,GAAG,kB,MCERC,MARf,WACE,OACE,yBAAKC,UAAU,OAAf,S,MCOWC,MARf,WACE,OACE,yBAAKD,UAAU,OAAf,O,yBCwBWE,G,MAvBC,SAACN,GAAW,IAAD,EACCO,mBAAS,IADV,mBAChBhB,EADgB,KACViB,EADU,KAMvB,OACI,yBAAKC,GAAG,aACJ,yBAAKA,GAAG,WACJ,0CAAe,0BAAMC,KAAK,MAAMC,aAAW,MAA5B,iBACf,6BACA,kBAAC,IAAD,CAAOC,SAAW,SAAApB,GAAC,OAAIgB,EAAQhB,EAAEqB,OAAOC,QAASA,MAAOvB,EAAMwB,YAAY,OAAON,GAAG,gBAEpF,yBAAKA,GAAG,eACJ,kBAAC,IAAD,CAAQO,QAXN,SAACxB,GAAD,OAAOP,EAAKgC,KAAK1B,IAASS,EAAMkB,QAAQC,KAAK,WAW/C,QACA,kBAAC,IAAD,CAAQH,QAXN,SAACxB,GAAD,OAAOP,EAAKgC,KAAK1B,IAASS,EAAMkB,QAAQC,KAAK,WAW/C,aCVAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJN,IAAMC,EACF,kBAAC,IAAD,CAAQC,SAAUC,cACd,6BACI,kBAAC,IAAD,CAAOC,KAAK,WAAW/B,UAAWS,IAClC,kBAAC,EAAD,CAAcuB,OAAK,EAACD,KAAK,IAAI/B,UAAWQ,IACxC,kBAAC,EAAD,CAAcuB,KAAK,QAAQ/B,UAAWQ,IACtC,kBAAC,EAAD,CAAcuB,KAAK,QAAQ/B,UAAWM,MAKlD2B,IAAS/B,OAAO0B,EAASM,SAASC,eAAe,SD0G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.830e05ed.chunk.js","sourcesContent":["class User {\n\n    static authenticated() {\n        let user = localStorage.getItem('user');\n        try {\n            user = JSON.parse(user);\n            if (user.name) {\n                return true;\n            }\n        } catch (e) {\n            return false;\n        }\n        return false;\n    }\n\n    static get() {\n\n    }\n\n    static save(name) {\n        localStorage.setItem('user', JSON.stringify({name}));\n        return true;\n    }\n\n}\n\nexport default User;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport User from '../../models/user'\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n      User.authenticated() === true\n        ? <Component {...props} />\n        : <Redirect to='/welcome' />\n    )} />\n);\n\nexport default PrivateRoute;","import React from 'react';\nimport './join.css';\n\nfunction Join() {\n  return (\n    <div className=\"App\">\n      join\n    </div>\n  );\n}\n\nexport default Join;\n","import React from 'react';\n\nimport './play.css';\n\nfunction Play() {\n  return (\n    <div className=\"App\">\n      Hi\n    </div>\n  );\n}\n\nexport default Play;\n","import React, { useState } from 'react';\nimport { Input, Button } from \"antd\";\n\nimport './welcome.css';\n\nimport User from '../../models/user';\n\nconst Welcome = (props) => {\n    const [name, setName] = useState('');\n    \n    const clickHost = (e) => User.save(name) && props.history.push('/play');\n    const clickJoin = (e) => User.save(name) && props.history.push('/join');\n\n    return (\n        <div id=\"container\">\n            <div id=\"content\">\n                <h1> Hellooo.. <span role=\"img\" aria-label=\"hi\">ðŸ‘‹</span></h1>\n                <div>\n                <Input onChange={ e => setName(e.target.value) } value={name} placeholder=\"Name\" id=\"name-input\"/>\n                </div>\n                <div id=\"action-btns\">\n                    <Button onClick={clickHost}>Host</Button>\n                    <Button onClick={clickJoin}>Join</Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Welcome;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, HashRouter as Router } from 'react-router-dom';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nimport PrivateRoute from './components/route-validation';\nimport Join from './components/join';\nimport Play from './components/play';\nimport Welcome from './components/welcome';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst gateway = (\n    <Router basename={process.env.PUBLIC_URL}>\n        <div>\n            <Route path=\"/welcome\" component={Welcome} />\n            <PrivateRoute exact path=\"/\" component={Play} />\n            <PrivateRoute path=\"/play\" component={Play} />\n            <PrivateRoute path=\"/join\" component={Join} />\n        </div>\n    </Router>\n);\n\nReactDOM.render(gateway, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}